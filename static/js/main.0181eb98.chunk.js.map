{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","createInput","name","onChange","disabled","Item","label","labelCol","span","key","placeholder","bind","createTextArea","TextArea","createDatepicker","App","useState","components","addComponent","values","changeValue","isEnabled","setEnabled","value","target","obj","onDateChange","_","date","className","defaultActiveKey","tab","checked","type","onClick","length","map","component","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAKOA,G,cAAWC,IAAXD,SAEDE,EAAc,SAACC,EAAMC,GAAP,OAAoB,SAACC,GAAD,OAAe,kBAAC,IAAKC,KAAN,CAAWC,MAAM,cAAcC,SAAU,CAAEC,KAAM,IAAMC,IAAKP,GAClH,kBAAC,IAAD,CAAOQ,YAAY,iBAAiBP,SAAUA,EAASQ,U,EAAWT,GAAOE,SAAUA,OAG9EQ,EAAiB,SAACV,EAAMC,GAAP,OAAoB,SAACC,GAAD,OAAe,kBAAC,IAAKC,KAAN,CAAWC,MAAM,iBAAiBC,SAAU,CAAEC,KAAM,IAAMC,IAAKP,GACxH,kBAAC,IAAMW,SAAP,CAAgBH,YAAY,iBAAiBP,SAAUA,EAASQ,U,EAAWT,GAAOE,SAAUA,OAGvFU,EAAmB,SAACZ,EAAMC,GAAP,OAAoB,SAACC,GAAD,OAAe,kBAAC,IAAKC,KAAN,CAAWC,MAAM,iBAAiBC,SAAU,CAAEC,KAAM,IAAMC,IAAKP,GAC1H,kBAAC,IAAD,CAAYC,SAAUA,EAASQ,U,EAAWT,GAAOE,SAAUA,OAqE7CW,MAlEf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACPC,EADO,KACKC,EADL,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAECC,EAFD,OAGkBJ,oBAAS,GAH3B,mBAGPK,EAHO,KAGIC,EAHJ,KAKd,SAASnB,EAAUD,EAAnB,GAAkD,IAAZqB,EAAW,EAAtBC,OAAWD,MAC/BE,EAAM,GACZA,EAAIvB,GAAQqB,EACZH,EAAY,eAAID,EAAL,GAAgBM,IAG5B,SAASC,EAAcxB,EAAMyB,EAAGC,GAC/B,IAAMH,EAAM,GACZA,EAAIvB,GAAQ0B,EACZR,EAAY,eAAID,EAAL,GAAgBM,IAsB5B,OACC,yBAAKI,UAAU,QACd,kBAAC,IAAD,CAAMC,iBAAiB,KACtB,kBAAC/B,EAAD,CAASgC,IAAI,gBAAgBtB,IAAI,iBAChC,yBAAKoB,UAAU,oBACf,kBAAC,IAAD,CAAU1B,SATd,YAAkD,IAAd6B,EAAa,EAAxBR,OAAWQ,QACnCV,GAAYU,IAQyBA,SAAUX,GAA5C,QAGA,kBAAC,IAAD,CAAQY,KAAK,UAAUC,QA3B3B,WACC,IAAMhC,EAAI,gBAAYe,EAAWkB,QACjCjB,GAAa,SAAAD,GAAU,4BAAQA,GAAR,CAAoBhB,EAAYC,EAAMC,UAyB1D,aAGA,kBAAC,IAAD,CAAQ8B,KAAK,UAAUC,QAzB3B,WACC,IAAMhC,EAAI,mBAAee,EAAWkB,QACpCjB,GAAa,SAAAD,GAAU,4BAAQA,GAAR,CAAoBL,EAAeV,EAAMC,UAuB7D,gBAGA,kBAAC,IAAD,CAAQ8B,KAAK,UAAUC,QAvB3B,WACC,IAAMhC,EAAI,qBAAiBe,EAAWkB,QACtCjB,GAAa,SAAAD,GAAU,4BAAQA,GAAR,CAAoBH,EAAiBZ,EAAMwB,UAqB/D,mBAICT,EAAWmB,KAAI,SAAAC,GAAS,OAAIA,EAAUhB,OAExC,kBAACtB,EAAD,CAASgC,IAAI,SAAStB,IAAI,UACzB,4BACE6B,OAAOC,KAAKpB,GAAQiB,KAAI,SAAA3B,GAAG,OAAI,gCAAMA,EAAN,KAAaU,EAAOV,YCjEtC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0181eb98.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Input, Form, Tabs, Button, Checkbox, DatePicker} from 'antd';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst {TabPane} = Tabs;\n\nconst createInput = (name, onChange) => (disabled) => (<Form.Item label=\"Basic input\" labelCol={{ span: 24 }} key={name}>\n\t<Input placeholder=\"Type something\" onChange={onChange.bind(this, name)} disabled={disabled}/>\n</Form.Item>);\n\nconst createTextArea = (name, onChange) => (disabled) => (<Form.Item label=\"Basic textarea\" labelCol={{ span: 24 }} key={name}>\n\t<Input.TextArea placeholder=\"Type something\" onChange={onChange.bind(this, name)} disabled={disabled}/>\n</Form.Item>);\n\nconst createDatepicker = (name, onChange) => (disabled) => (<Form.Item label=\"Basic textarea\" labelCol={{ span: 24 }} key={name}>\n\t<DatePicker onChange={onChange.bind(this, name)} disabled={disabled}/>\n</Form.Item>);\n\nfunction App() {\n\tconst [components, addComponent] = useState([]);\n\tconst [values, changeValue] = useState({});\n\tconst [isEnabled, setEnabled] = useState(true);\n\t\n\tfunction onChange (name, { target : { value } }) {\n\t\tconst obj = {};\n\t\tobj[name] = value;\n\t\tchangeValue({...values, ...obj});\n\t}\n\t\n\tfunction onDateChange (name, _, date) {\n\t\tconst obj = {};\n\t\tobj[name] = date;\n\t\tchangeValue({...values, ...obj});\n\t}\n\n\tfunction addInput () {\n\t\tconst name = `input-${components.length}`;\n\t\taddComponent(components => [...components, createInput(name, onChange)]);\n\t}\n\t\n\tfunction addTextarea () {\n\t\tconst name = `textarea-${components.length}`;\n\t\taddComponent(components => [...components, createTextArea(name, onChange)]);\n\t}\n\t\n\tfunction addDatepicker () {\n\t\tconst name = `datepicker-${components.length}`;\n\t\taddComponent(components => [...components, createDatepicker(name, onDateChange)]);\n\t}\n\t\n\tfunction onEditChange ({ target : { checked } }) {\n\t\tsetEnabled(!checked);\n\t}\n\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<Tabs defaultActiveKey=\"1\">\n\t\t\t\t<TabPane tab=\"Form Settings\" key=\"Form Settings\">\n\t\t\t\t\t<div className=\"controls-wrapper\">\n\t\t\t\t\t<Checkbox onChange={onEditChange} checked={!isEnabled}>\n\t\t\t\t\t\tEdit\n\t\t\t\t\t</Checkbox>\n\t\t\t\t\t<Button type=\"primary\" onClick={addInput}>\n\t\t\t\t\t\tAdd input\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"primary\" onClick={addTextarea}>\n\t\t\t\t\t\tAdd textarea\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"primary\" onClick={addDatepicker}>\n\t\t\t\t\t\tAdd datepicker\n\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t{components.map(component => component(isEnabled))}\n\t\t\t\t</TabPane>\n\t\t\t\t<TabPane tab=\"Result\" key=\"Result\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{Object.keys(values).map(key => <li> {key}: {values[key]}</li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t</TabPane>\n\t\t\t</Tabs>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}